from agency_swarm.tools import BaseTool
from pydantic import Field
import requests
import json
import time
import os
from dotenv import load_dotenv

load_dotenv()  # k√∂rnyezeti v√°ltoz√≥k bet√∂lt√©se

# Webhook URL a k√∂rnyezeti v√°ltoz√≥b√≥l
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://hook.eu2.make.com/e7v3t475ch1urzohmthysi2hf3005tx7")

class webhook_sender(BaseTool):
    """
    Eszk√∂z a gener√°lt social media poszt √©s kapcsol√≥d√≥ adatok k√ºld√©s√©re a Webhookra.
    """
    post_content: str = Field(
        ..., description="A gener√°lt social media poszt sz√∂vege"
    )
    property_data: dict = Field(
        ..., description="Az ingatlan adatait tartalmaz√≥ sz√≥t√°r"
    )
    image_urls: list = Field(
        [], description="A felt√∂lt√∂tt k√©pek URL-jeinek list√°ja"
    )
    additional_data: dict = Field(
        {}, description="Tov√°bbi adatok, amelyeket a webhookra kell k√ºldeni"
    )

    def run(self):
        """
        Elk√ºldi a posztot √©s a kapcsol√≥d√≥ adatokat a webhookra.
        """
        try:
            # Webhook URL ellen≈ërz√©se
            if not WEBHOOK_URL:
                return {
                    "success": False,
                    "error": "A WEBHOOK_URL k√∂rnyezeti v√°ltoz√≥ nincs be√°ll√≠tva"
                }
            
            # El≈ëk√©sz√≠tj√ºk a k√ºldend≈ë adatokat
            payload = {
                "post_content": self.post_content,
                "property_data": self.property_data,
                "image_urls": self.image_urls,
                "timestamp": int(time.time()),
                "source": "Veyron Hungary AI Assistant"
            }
            
            # Hozz√°adjuk a tov√°bbi adatokat, ha vannak
            if self.additional_data:
                payload.update(self.additional_data)
            
            # Elk√ºldj√ºk a POST k√©r√©st a webhookra
            response = requests.post(
                WEBHOOK_URL,
                headers={"Content-Type": "application/json"},
                data=json.dumps(payload)
            )
            
            # Ellen≈ërizz√ºk a v√°lasz st√°tusz√°t
            if response.status_code in (200, 201, 202):
                return {
                    "success": True,
                    "status_code": response.status_code,
                    "response": self._safe_parse_json(response.text)
                }
            else:
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": f"A webhook nem fogadta el a k√©r√©st: {response.text}"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"Hiba t√∂rt√©nt a webhook h√≠v√°sa k√∂zben: {str(e)}"
            }
    
    def _safe_parse_json(self, text):
        """
        Biztons√°gosan pr√≥b√°lja meg parse-olni a JSON v√°laszt.
        """
        try:
            return json.loads(text)
        except:
            return text

if __name__ == "__main__":
    # Tesztelj√ºk az eszk√∂zt egy minta poszttal
    property_data = {
        "address": "Budapest, XII. ker√ºlet, Normafa √∫t",
        "price": "750 000 000 Ft",
        "rooms": "5 szoba + 2 f√ºrd≈ëszoba",
        "size": "240 m¬≤"
    }
    
    post_content = """üåü LUXUS A NORMAF√ÅN√ÅL - PANOR√ÅM√ÅS √ÅLOMOTTHON üåü

B√ºszk√©n mutatjuk be ezt a l√©legzetel√°ll√≠t√≥ luxusingatlant a Normafa sz√≠v√©ben, amely √∂tv√∂zi az exkluzivit√°st √©s a term√©szet k√∂zels√©g√©t.

üìç Budapest, XII. ker√ºlet, Normafa √∫t
üí∞ 750 000 000 Ft
üè† 5 szoba + 2 f√ºrd≈ëszoba
üìè 240 m¬≤

K√ºl√∂nleges jellemz≈ëk:
‚úÖ P√°ratlan panor√°ma a v√°rosra
‚úÖ Priv√°t medence √©s jakuzzi
‚úÖ Intelligens okosotthon rendszer
‚úÖ Exkluz√≠v bels≈ë design

√ârdekl≈ëd√©s eset√©n keresse luxus ingatlan tan√°csad√≥inkat!

#luxusingatlan #normafa #panorama #budapestluxury #exclusivehome #veyronhungary #dreamhome"""
    
    image_urls = [
        "https://example.com/image1.jpg",
        "https://example.com/image2.jpg"
    ]
    
    sender = webhook_sender(
        post_content=post_content,
        property_data=property_data,
        image_urls=image_urls
    )
    
    # Teszt √ºzemm√≥dban ne k√ºldj√ºk el t√©nylegesen
    print("Webhook payload el≈ëk√©sz√≠tve:", json.dumps(
        {
            "post_content": sender.post_content,
            "property_data": sender.property_data,
            "image_urls": sender.image_urls,
            "timestamp": int(time.time()),
            "source": "Veyron Hungary AI Assistant"
        }, 
        indent=2
    )) 